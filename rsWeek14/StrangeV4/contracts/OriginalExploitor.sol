// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

contract Base {
    address public owner;

    modifier onlyOwner() {
        require(msg.sender == owner, "Ownable: caller is not the owner");
        _;
    }

    function transferOwnership(address newOwner) external onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        owner = newOwner;
    }

    function kill() external {
        selfdestruct(payable(owner));
    }
}

contract Original is Base {
    constructor(address _owner) {
        owner = _owner;
    }

    function addTwo(uint256 input) external pure returns (uint256) {
        return input + 2;
    }
}

contract Exploitor is Base {
    constructor(address _owner) {
        owner = _owner;
    }

    function addTwo(uint256 input) external pure returns (uint256) {
        return input + 4;
    }
}
